# -*- coding: utf8 -*-
from qtpy import QtWidgets, QtGui, QtCore


class PulsedHeatingWidget(QtWidgets.QGroupBox):
    def __init__(self, *args, **kwargs):
        super(PulsedHeatingWidget, self).__init__(*args, **kwargs)

        self.ten_percent_btn = QtWidgets.QPushButton('10%')
        self.zero_btn = QtWidgets.QPushButton('Zero')
        self.laser_percent_tweak_le = QtWidgets.QLineEdit('0.1')
        self.ds_increase_percent_btn = QtWidgets.QPushButton('\u25b2')
        self.ds_decrease_percent_btn = QtWidgets.QPushButton('\u25bc')
        self.us_increase_percent_btn = QtWidgets.QPushButton('\u25b2')
        self.us_decrease_percent_btn = QtWidgets.QPushButton('\u25bc')
        self.both_increase_percent_btn = QtWidgets.QPushButton('\u25b2')
        self.both_decrease_percent_btn = QtWidgets.QPushButton('\u25bc')
        self.start_pulse_btn = QtWidgets.QPushButton('Start')
        self.stop_pulse_btn = QtWidgets.QPushButton('Stop')
        self.force_alignment_slides_in_cb = QtWidgets.QCheckBox('Force Slides In')
        self.alignment_slides_status_lbl = QtWidgets.QLabel('Slides')
        self.toggle_alignment_slides_status_btn = QtWidgets.QPushButton('Slides')
        self.start_timing_btn = QtWidgets.QPushButton('Adjustment')
        self.num_pulses_lbl = QtWidgets.QLabel('# of Pulses:')
        self.num_pulses_le = QtWidgets.QLineEdit()
        self.measure_temperature_cb = QtWidgets.QCheckBox('measure T?')
        self.measure_diffraction_cb = QtWidgets.QCheckBox('measure XRD?')
        self.ds_enable_pulses_cb = QtWidgets.QCheckBox('Enable?')
        self.us_enable_pulses_cb = QtWidgets.QCheckBox('Enable?')
        self.ds_lbl = QtWidgets.QLabel('Down-stream')
        self.us_lbl = QtWidgets.QLabel('Up-stream')
        self.ds_diode_current_lbl = QtWidgets.QLabel('Off')
        self.us_diode_current_lbl = QtWidgets.QLabel('Off')
        self.ds_percent_display_le = QtWidgets.QLineEdit('0.0')
        self.us_percent_display_le = QtWidgets.QLineEdit('0.0')
        self.percent_lbl = QtWidgets.QLabel('%')

        self.width_lbl = QtWidgets.QLabel('width, \xB5s')
        self.ds_width_le = QtWidgets.QLineEdit('1')
        self.us_width_le = QtWidgets.QLineEdit('1')
        self.delay_lbl = QtWidgets.QLabel('delay, \xB5s')
        self.ds_delay_le = QtWidgets.QLineEdit('0')
        self.us_delay_le = QtWidgets.QLineEdit('0')

        self.manual_delay_step_button_group = QtWidgets.QButtonGroup()
        self.manual_delay_step_size_1_btn = QtWidgets.QPushButton('1')
        self.manual_delay_step_size_0p1_btn = QtWidgets.QPushButton('0.1')
        self.manual_delay_step_size_0p01_btn = QtWidgets.QPushButton('0.01')
        self.manual_delay_step_size_0p001_btn = QtWidgets.QPushButton('0.001')
        self.manual_delay_step_btns = [self.manual_delay_step_size_1_btn, self.manual_delay_step_size_0p1_btn,
                                       self.manual_delay_step_size_0p01_btn, self.manual_delay_step_size_0p001_btn]
        for manual_delay_step_btn in self.manual_delay_step_btns:
            self.manual_delay_step_button_group.addButton(manual_delay_step_btn)
        self.manual_delay_step_size_1_btn.setChecked(True)

        self.ds_us_manual_delay_lbl = QtWidgets.QLabel('DS-->US delay, \xB5s')
        self.gate_manual_delay_lbl = QtWidgets.QLabel('Gate delay, \xB5s')
        self.ds_us_manual_delay_sb = QtWidgets.QDoubleSpinBox()
        self.gate_manual_delay_sb = QtWidgets.QDoubleSpinBox()

        self.collect_quenched_xrd_btn = QtWidgets.QPushButton('Collect quenched XRD')
        self.measure_t_background_btn = QtWidgets.QPushButton('Measure T BG')

        self.last_xrd_file_lbl = QtWidgets.QLabel('Last XRD File:')
        self.last_xrd_file_le = QtWidgets.QLineEdit()
        self.last_t_file_lbl = QtWidgets.QLabel('Last T File:')
        self.last_t_file_le = QtWidgets.QLineEdit()

        self.multi_gate_toggle_btn = QtWidgets.QPushButton('Multi-Gate')

        self.multi_gate_widget = MultiGateWidget()

        self._layout = QtWidgets.QVBoxLayout()
        self._grid_layout = QtWidgets.QGridLayout()
        self.caption = QtWidgets.QLabel('Pulsed Laser Heating')
        self._layout.addWidget(self.caption)
        self._layout.addLayout(self._grid_layout)
        self._layout.addWidget(self.multi_gate_widget)

        self._grid_layout.addWidget(self.force_alignment_slides_in_cb, 0, 0, 1, 1)
        self._grid_layout.addWidget(self.alignment_slides_status_lbl, 0, 1, 1, 1)
        self._grid_layout.addWidget(self.start_timing_btn, 0, 2, 1, 1)
        self._grid_layout.addWidget(self.stop_pulse_btn, 0, 3, 2, 2)
        self._grid_layout.addWidget(self.start_pulse_btn, 0, 5, 1, 1)
        self._grid_layout.addWidget(self.num_pulses_lbl, 0, 6, 1, 1)
        self._grid_layout.addWidget(self.toggle_alignment_slides_status_btn, 1, 0, 1, 1)
        self._grid_layout.addWidget(self.ten_percent_btn, 1, 2, 1, 1)
        self._grid_layout.addWidget(self.zero_btn, 1, 5, 1, 1)
        self._grid_layout.addWidget(self.num_pulses_le, 1, 6, 1, 2)
        self._grid_layout.addWidget(self.both_increase_percent_btn, 2, 3, 1, 2)
        self._grid_layout.addWidget(self.ds_lbl, 2, 0, 1, 2)
        self._grid_layout.addWidget(self.us_lbl, 2, 6, 1, 2)
        self._grid_layout.addWidget(self.ds_enable_pulses_cb, 3, 0, 1, 1)
        self._grid_layout.addWidget(self.ds_diode_current_lbl, 3, 1, 1, 1)
        self._grid_layout.addWidget(self.laser_percent_tweak_le, 3, 3, 1, 2)
        self._grid_layout.addWidget(self.us_diode_current_lbl, 3, 6, 1, 1)
        self._grid_layout.addWidget(self.us_enable_pulses_cb, 3, 7, 1, 1)
        self._grid_layout.addWidget(self.ds_decrease_percent_btn, 4, 0)
        self._grid_layout.addWidget(self.ds_increase_percent_btn, 4, 1)
        self._grid_layout.addWidget(self.both_decrease_percent_btn, 4, 3, 1, 2)
        self._grid_layout.addWidget(self.us_decrease_percent_btn, 4, 6)
        self._grid_layout.addWidget(self.us_increase_percent_btn, 4, 7)
        self._grid_layout.addWidget(self.ds_percent_display_le, 5, 0, 1, 2)
        self._grid_layout.addWidget(self.percent_lbl, 5, 2, 1, 4)
        self._grid_layout.addWidget(self.us_percent_display_le, 5, 6, 1, 2)
        self._grid_layout.addWidget(self.ds_width_le, 6, 0, 1, 2)
        self._grid_layout.addWidget(self.width_lbl, 6, 2, 1, 4)
        self._grid_layout.addWidget(self.us_width_le, 6, 6, 1, 2)
        self._grid_layout.addWidget(self.ds_delay_le, 7, 0, 1, 2)
        self._grid_layout.addWidget(self.delay_lbl, 7, 2, 1, 4)
        self._grid_layout.addWidget(self.us_delay_le, 7, 6, 1, 2)
        self._grid_layout.addWidget(self.ds_us_manual_delay_lbl, 8, 0, 1, 1)
        self._grid_layout.addWidget(self.ds_us_manual_delay_sb, 8, 1, 1, 1)
        self._grid_layout.addWidget(self.manual_delay_step_size_1_btn, 8, 2, 1, 1)
        self._grid_layout.addWidget(self.manual_delay_step_size_0p1_btn, 8, 3, 1, 1)
        self._grid_layout.addWidget(self.manual_delay_step_size_0p01_btn, 8, 4, 1, 1)
        self._grid_layout.addWidget(self.manual_delay_step_size_0p001_btn, 8, 5, 1, 1)
        self._grid_layout.addWidget(self.gate_manual_delay_lbl, 8, 6, 1, 1)
        self._grid_layout.addWidget(self.gate_manual_delay_sb, 8, 7, 1, 1)
        self._grid_layout.addWidget(self.measure_temperature_cb, 9, 0, 1, 1)
        self._grid_layout.addWidget(self.measure_diffraction_cb, 9, 1, 1, 1)
        self._grid_layout.addWidget(self.collect_quenched_xrd_btn, 9, 2, 1, 2)
        self._grid_layout.addWidget(self.measure_t_background_btn, 9, 4, 1, 2)
        self._grid_layout.addWidget(self.last_xrd_file_lbl, 10, 0, 1, 1)
        self._grid_layout.addWidget(self.last_xrd_file_le, 10, 1, 1, 3)
        self._grid_layout.addWidget(self.last_t_file_lbl, 10, 4, 1, 1)
        self._grid_layout.addWidget(self.last_t_file_le, 10, 5, 1, 3)
        self._grid_layout.addWidget(self.multi_gate_toggle_btn, 11, 0, 1, 1)

        self.setLayout(self._layout)

        self.style_widgets()
        self.set_tool_tips_for_widgets()

    def style_widgets(self):
        self.stop_pulse_btn.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.stop_pulse_btn.setStyleSheet("font: bold 16px; color: black; background-color: pink;")

        self.start_pulse_btn.setStyleSheet("background-color: LightGreen;")
        self.alignment_slides_status_lbl.setStyleSheet("color: LightBlue;")
        self.start_timing_btn.setStyleSheet("background-color: LightBlue;")
        self.num_pulses_le.setEnabled(False)
        self.ds_enable_pulses_cb.setChecked(True)
        self.us_enable_pulses_cb.setChecked(True)
        self.laser_percent_tweak_le.setValidator(QtGui.QDoubleValidator())
        self.ds_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.us_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.ds_lbl.setStyleSheet("font: bold;")
        self.us_lbl.setStyleSheet("font: bold;")
        self.ds_diode_current_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.ds_diode_current_lbl.setStyleSheet("font: bold; background-color: LightGreen;")
        self.us_diode_current_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.us_diode_current_lbl.setStyleSheet("font: bold; background-color: LightGreen;")
        self.ds_percent_display_le.setEnabled(False)
        self.us_percent_display_le.setEnabled(False)
        self.ds_percent_display_le.setAlignment(QtCore.Qt.AlignCenter)
        self.us_percent_display_le.setAlignment(QtCore.Qt.AlignCenter)
        self.percent_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.ds_percent_display_le.setStyleSheet("font: bold; color: black;")
        self.us_percent_display_le.setStyleSheet("font: bold; color: black;")
        self.ds_width_le.setEnabled(False)
        self.us_width_le.setEnabled(False)
        self.ds_delay_le.setEnabled(False)
        self.us_delay_le.setEnabled(False)
        self.ds_width_le.setAlignment(QtCore.Qt.AlignCenter)
        self.us_width_le.setAlignment(QtCore.Qt.AlignCenter)
        self.ds_delay_le.setAlignment(QtCore.Qt.AlignCenter)
        self.us_delay_le.setAlignment(QtCore.Qt.AlignCenter)
        self.delay_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.width_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.ds_us_manual_delay_sb.setSingleStep(1.0)
        self.ds_us_manual_delay_sb.setValue(0.0)
        self.ds_us_manual_delay_sb.setRange(-999, 999)
        self.ds_us_manual_delay_sb.setDecimals(3)
        self.gate_manual_delay_sb.setSingleStep(1.0)
        self.gate_manual_delay_sb.setValue(0.0)
        self.gate_manual_delay_sb.setRange(-999, 999)
        self.gate_manual_delay_sb.setDecimals(3)
        self.measure_temperature_cb.setChecked(True)
        self.measure_diffraction_cb.setChecked(True)
        self.last_xrd_file_le.setEnabled(False)
        self.last_t_file_le.setEnabled(False)
        self.multi_gate_widget.setVisible(False)
        self.multi_gate_toggle_btn.setCheckable(True)
        self.multi_gate_toggle_btn.setChecked(False)
        self.manual_delay_step_size_0p1_btn.setCheckable(True)
        self.manual_delay_step_size_1_btn.setCheckable(True)
        self.manual_delay_step_size_0p001_btn.setCheckable(True)
        self.manual_delay_step_size_0p01_btn.setCheckable(True)

    def set_tool_tips_for_widgets(self):
        self.force_alignment_slides_in_cb.setToolTip("When checked, glass alignment slides will remain in during "
                                                     "pulsed heating")
        self.alignment_slides_status_lbl.setToolTip("Glass slides for timing the lasers to the gate")
        self.num_pulses_le.setToolTip("To change # of pulses, go to the 'Configure' tab")
        self.ds_us_manual_delay_sb.setToolTip("Change only when noticing US and DS are not timed together\nUncheck the "
                                              "'Enable?' checkbox for each laser separately to test")
        self.manual_delay_step_size_1_btn.setToolTip("Use to set step for 'Gate delay' and for 'DS-->US delay'")
        self.manual_delay_step_size_0p01_btn.setToolTip("Use to set step for 'Gate delay' and for 'DS-->US delay'")
        self.manual_delay_step_size_0p001_btn.setToolTip("Use to set step for 'Gate delay' and for 'DS-->US delay'")
        self.manual_delay_step_size_0p1_btn.setToolTip("Use to set step for 'Gate delay' and for 'DS-->US delay'")
        self.multi_gate_toggle_btn.setToolTip("Show multi-gate controls")

    def update_timing_labels(self, timings):
        self.ds_delay_le.setText(str(round(timings['delay_t1'] * 1E6, 3)))
        self.us_delay_le.setText(str(round(timings['delay_t2'] * 1E6, 3)))
        self.ds_width_le.setText(str(round(timings['width_t1'] * 1E6, 3)))
        self.us_width_le.setText(str(round(timings['width_t2'] * 1E6, 3)))


class MultiGateWidget(QtWidgets.QGroupBox):
    def __init__(self, *args, **kwargs):
        super(MultiGateWidget, self).__init__(*args, **kwargs)

        self.multi_gate_lbl = QtWidgets.QLabel('Gate delay values, \xB5s (comma separated)')
        self.multi_gate_values_le = QtWidgets.QLineEdit('-1,0,1,2,3')
        self.run_multi_gate_btn = QtWidgets.QPushButton('Run Multi-Gate')

        self._main_layout = QtWidgets.QHBoxLayout()
        self._main_layout.addWidget(self.multi_gate_lbl)
        self._main_layout.addWidget(self.multi_gate_values_le)
        self._main_layout.addStretch(1)
        self._main_layout.addWidget(self.run_multi_gate_btn)
        self.setLayout(self._main_layout)
        self.set_tool_tips_for_widgets()
        self.style_widgets()

    def style_widgets(self):
        self.run_multi_gate_btn.setStyleSheet("background-color: LightGreen;")

    def set_tool_tips_for_widgets(self):
        self.multi_gate_values_le.setToolTip("Input relative gate delays (comma separated)\nPress the 'Run Multi_Gate' "
                                             "button when ready")
